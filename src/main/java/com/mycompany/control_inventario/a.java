package com.mycompany.control_inventario;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoDatabase;
import java.awt.HeadlessException;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Inventario;
import modelo.Producto;
import modelo.conexion_mongodb;

/**
 *
 * @author jloor
 */
public final class a extends javax.swing.JFrame {
     public Inventario modelo;
    public conexion_mongodb conexionMongo;
    private MongoDatabase database;

    /**
     * Creates new form Control_inventario
     */
    public a() {
        initComponents();
       // Inicializar el modelo de tabla
    modeloTabla = (DefaultTableModel) this.jtblProductos.getModel();
    
    // Configurar la tabla para que no sea editable
    jtblProductos.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {},
        new String [] {"Nombre", "Cantidad", "Precio"}
    ) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // Hacer que todas las celdas no sean editables
        }
    });
    
    // Agregar el listener para selección de filas
    jtblProductos.getSelectionModel().addListSelectionListener(event -> {
        if (!event.getValueIsAdjusting() && jtblProductos.getSelectedRow() != -1) {
            int filaSeleccionada = jtblProductos.getSelectedRow();
            jNombre.setText(jtblProductos.getValueAt(filaSeleccionada, 0).toString());
            jCantidad.setText(jtblProductos.getValueAt(filaSeleccionada, 1).toString());
            jPrecio.setText(jtblProductos.getValueAt(filaSeleccionada, 2).toString());
        }
    });
    
    // Conectar a MongoDB
    conectarMongoDB();
    
    // Cargar los productos al iniciar
    
    }
DefaultTableModel  modeloTabla;
    private void conectarMongoDB() {
        try {
            conexionMongo = new conexion_mongodb();
            MongoClient client = conexionMongo.crearConexion();
            
            if (client != null) {
                database = conexionMongo.getDatabaseWithCodec("inventario");
                modelo = new Inventario(database);
                JOptionPane.showMessageDialog(null, "✅ Conexión a MongoDB exitosa.");
            } else {
                JOptionPane.showMessageDialog(null, "❌ Error al conectar con MongoDB.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "❌ Error en MongoDB: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgh = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jNombre = new javax.swing.JTextField();
        jCantidad = new javax.swing.JTextField();
        jPrecio = new javax.swing.JTextField();
        jbtnAgregar = new javax.swing.JButton();
        jbtnActualizar = new javax.swing.JButton();
        jbtnConsultar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblProductos = new javax.swing.JTable();
        jbtnCalcularTotal = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bgh.setBackground(new java.awt.Color(153, 153, 153));
        bgh.setForeground(new java.awt.Color(153, 153, 153));
        bgh.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setForeground(new java.awt.Color(60, 63, 65));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 70, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
        );

        bgh.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 410));

        jNombre.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        bgh.add(jNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, 90, -1));

        jCantidad.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        bgh.add(jCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 150, 90, -1));

        jPrecio.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        bgh.add(jPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 200, 90, -1));

        jbtnAgregar.setText("Agregar");
        jbtnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAgregarActionPerformed(evt);
            }
        });
        bgh.add(jbtnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 240, 90, -1));

        jbtnActualizar.setText("Actualizar");
        jbtnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnActualizarActionPerformed(evt);
            }
        });
        bgh.add(jbtnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 280, 90, -1));

        jbtnConsultar.setText("Consultar");
        jbtnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnConsultarActionPerformed(evt);
            }
        });
        bgh.add(jbtnConsultar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 320, 90, -1));

        jLabel1.setText("Nombre");
        bgh.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, -1, -1));

        jLabel2.setText("Cantidad");
        bgh.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, -1, -1));

        jLabel3.setText("Precio");
        bgh.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 180, -1, -1));

        jScrollPane1.setBackground(new java.awt.Color(0, 153, 102));
        jScrollPane1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane1.setForeground(new java.awt.Color(0, 153, 102));

        jtblProductos.setBackground(new java.awt.Color(204, 204, 204));
        jtblProductos.setForeground(new java.awt.Color(0, 102, 51));
        jtblProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Cantidad", "Precio"
            }
        ));
        jScrollPane1.setViewportView(jtblProductos);

        bgh.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, 460, 340));

        jbtnCalcularTotal.setText("Calcular el Total");
        jbtnCalcularTotal.setToolTipText("");
        jbtnCalcularTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCalcularTotalActionPerformed(evt);
            }
        });
        bgh.add(jbtnCalcularTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 360, -1, -1));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setForeground(new java.awt.Color(60, 63, 65));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 720, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 70, Short.MAX_VALUE)
        );

        bgh.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, -11, 720, 70));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public String getNombre() {
    return jNombre.getText();
}

public int getCantidad() throws NumberFormatException {
    return Integer.parseInt(jCantidad.getText());
}

public double getPrecio() throws NumberFormatException {
    return Double.parseDouble(jPrecio.getText());
}

public String getCantidadTexto() {
    return jCantidad.getText();
}

public String getPrecioTexto() {
    return jPrecio.getText();
}

public void limpiarCampos() {
    jNombre.setText("");
    jCantidad.setText("");
    jPrecio.setText("");
    limpiarSeleccionTabla();
}
public void limpiarSeleccionTabla() {
    jtblProductos.clearSelection();
}
public void mostrarValorTotal(double total) {
    JOptionPane.showMessageDialog(this, "Valor total del inventario: $" + total, "Total", JOptionPane.INFORMATION_MESSAGE);
}
public void mostrarMensaje(String mensaje, String titulo, int tipo) {
    JOptionPane.showMessageDialog(this, mensaje, titulo, tipo);
}
public void mostrarProductos(List<Producto> productos) {
     modeloTabla.setRowCount(0);
        for (Producto p : productos) {
            Object[] fila = {p.getNombre(), p.getCantidad(), p.getPrecio()};
            modeloTabla.addRow(fila);
        }
}

public void agregarListenerAgregar(ActionListener listener) {
    jbtnAgregar.addActionListener(listener);
}
public void agregarListenerActualizar(ActionListener listener) {
    jbtnActualizar.addActionListener(listener);
}
public void agregarListenerConsultar(ActionListener listener) {
    jbtnConsultar.addActionListener(listener);
}
public void agregarListenerCalcularTotal(ActionListener listener) {
    jbtnCalcularTotal.addActionListener(listener);
}

    private void jbtnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAgregarActionPerformed
        try {
            // Obtener datos de los campos de texto
            String nombre = jNombre.getText();
            int cantidad = Integer.parseInt(jCantidad.getText());
            double precio = Double.parseDouble(jPrecio.getText());

            // Validar que los campos no estén vacíos
            if (nombre.isEmpty() || jCantidad.getText().isEmpty() || jPrecio.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Crear un nuevo producto
            Producto producto = new Producto(nombre, cantidad, precio);

            // Agregar el producto al inventario
            modelo.agregarProducto(producto);

            // Agregar una fila a la tabla
            modeloTabla.addRow(new Object[]{nombre, cantidad, precio});

            // Limpiar los campos de texto
            limpiarCampos();

            // Mostrar mensaje de éxito
            JOptionPane.showMessageDialog(this, "Producto agregado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        } catch (NumberFormatException e) {
            // Manejar error si el usuario ingresa texto en lugar de números
            JOptionPane.showMessageDialog(this, "Ingrese valores válidos para cantidad y precio.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (HeadlessException e) {
            // Manejar cualquier otro error
            JOptionPane.showMessageDialog(this, "Ocurrió un error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbtnAgregarActionPerformed

    private void jbtnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnActualizarActionPerformed
        try {
            // Validar que haya una fila seleccionada
            int filaSeleccionada = jtblProductos.getSelectedRow();
            if (filaSeleccionada == -1) {
                JOptionPane.showMessageDialog(this, "Por favor seleccione un producto de la tabla.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener datos de los campos de texto
            String nombre = jNombre.getText();
            int cantidad = Integer.parseInt(jCantidad.getText());
            double precio = Double.parseDouble(jPrecio.getText());

            // Validar que los campos no estén vacíos
            if (nombre.isEmpty() || jCantidad.getText().isEmpty() || jPrecio.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener el nombre original del producto seleccionado
            String nombreOriginal = jtblProductos.getValueAt(filaSeleccionada, 0).toString();

            // Crear objeto Producto con los nuevos datos
            Producto productoActualizado = new Producto(nombre, cantidad, precio);

            // Actualizar el producto en el inventario (necesitarás modificar tu modelo)
            boolean actualizado = modelo.actualizarProducto(nombreOriginal, productoActualizado);

            if (actualizado) {
                // Actualizar la fila en la tabla
                modeloTabla.setValueAt(nombre, filaSeleccionada, 0);
                modeloTabla.setValueAt(cantidad, filaSeleccionada, 1);
                modeloTabla.setValueAt(precio, filaSeleccionada, 2);

                // Limpiar los campos de texto
                limpiarCampos();

                // Mostrar mensaje de éxito
                JOptionPane.showMessageDialog(this, "Producto actualizado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Mostrar mensaje si el producto no existe
                JOptionPane.showMessageDialog(this, "Error al actualizar el producto.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            // Manejar error si el usuario ingresa texto en lugar de números
            JOptionPane.showMessageDialog(this, "Ingrese valores válidos para cantidad y precio.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (HeadlessException e) {
            // Manejar cualquier otro error
            JOptionPane.showMessageDialog(this, "Ocurrió un error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbtnActualizarActionPerformed

    private void jbtnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnConsultarActionPerformed
        try {
            // Obtener la lista de productos del inventario
            List<Producto> productos = modelo.consultarProductos();

            // Limpiar la tabla antes de mostrar los nuevos productos
            modeloTabla = (DefaultTableModel) jtblProductos.getModel();
            modeloTabla.setRowCount(0); // Borra todas las filas

            // Agregar los productos a la tabla
            for (Producto p : productos) {
                modeloTabla.addRow(new Object[]{p.getNombre(), p.getCantidad(), p.getPrecio()});
            }
            // Mostrar mensaje si no hay productos
            if (productos.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No hay productos registrados.", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
             // Mostrar mensaje informativo
            if (productos.isEmpty()) {
            JOptionPane.showMessageDialog(
                this, 
                "No hay productos en el inventario.", 
                "Consulta", 
                JOptionPane.INFORMATION_MESSAGE
            );
            } else {
            JOptionPane.showMessageDialog(
                this, 
                "Se cargaron " + productos.size() + " productos.", 
                "Consulta exitosa", 
                JOptionPane.INFORMATION_MESSAGE
            );
            }
        } catch (HeadlessException e) {
            // Manejar cualquier error
            JOptionPane.showMessageDialog(this, "Ocurrió un error al consultar los productos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbtnConsultarActionPerformed

    private void jbtnCalcularTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCalcularTotalActionPerformed
        try {
            // Calcular el valor total del inventario
            double valorTotal = modelo.calcularValorTotal();

            // Mostrar el valor total en un mensaje emergente
            JOptionPane.showMessageDialog(this, "El valor total del inventario es: $" + valorTotal, "Valor Total", JOptionPane.INFORMATION_MESSAGE);

        } catch (HeadlessException e) {
            // Manejar cualquier error
            JOptionPane.showMessageDialog(this, "Ocurrió un error al calcular el total: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbtnCalcularTotalActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new a().setVisible(true));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bgh;
    private javax.swing.JTextField jCantidad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jNombre;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jPrecio;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnActualizar;
    private javax.swing.JButton jbtnAgregar;
    private javax.swing.JButton jbtnCalcularTotal;
    private javax.swing.JButton jbtnConsultar;
    private javax.swing.JTable jtblProductos;
    // End of variables declaration//GEN-END:variables

}